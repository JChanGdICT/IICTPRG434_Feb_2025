#!/usr/bin/env python3
# coding: utf-8

"""
This script implements a simple address book using a list of dictionaries,
where each dictionary represents an individual's contact details. Users can
add, remove, list, show, or clear entries. It's designed to teach basic
programming constructs like functions, lists, dictionaries, and user input handling.
"""

import sys

# Constants for menu options
ADD_ENTRY = 1
REMOVE_ENTRY = 2
LIST_ENTRIES = 3
SHOW_ENTRY = 4
CLEAR_ENTRIES = 5
EXIT = 6

address_book = []  # Initialise an empty list to store address book entries

def num_input(prompt: str) -> int:
    """
    Prompt the user for a numeric input.

    * Use a while loop to continuously prompt the user until a valid input is entered
    * Inside the loop, try to convert the user's input to an integer using int()
    * If successful, return the integer
    * If a ValueError occurs (user entered non-numeric input), print an error message
      and continue the loop to prompt again
    """
    pass  # Remove this and add your code

def add_entry(name: str, phone: str, email: str) -> None:
    """
    Add a new entry to the address book.

    * Create a dictionary called 'entry' with keys 'name', 'phone', and 'email'
    * Append the 'entry' dictionary to the address_book list
    * Print a success message
    """
    pass  # Remove this and add your code

def remove_entry(number: int) -> None:
    """
    Remove an entry from the address book by its number.

    * Check if the address book is empty, print a message if it is, and return
    * Check if the number is valid (greater than or equal to 1 and less than or equal to the length of address_book)
    * If valid, remove the entry at the specified index (number - 1) using the list's pop() method
    * Print a success message with the name of the removed entry
    * If invalid, print an error message
    """
    pass  # Remove this and add your code

def list_entries() -> None:
    """
    List all entries in the address book.

    * Check if the address book is empty, print a message if it is, and return
    * Use the enumerate() function to loop through each entry in the address_book list, starting the index at 1
    * Print the index and name of each entry
    """
    pass  # Remove this and add your code

def show_entry(number: int) -> None:
    """
    Show details of a specific entry in the address book.

    * Check if the address book is empty, print a message if it is, and return
    * Check if the number is valid (greater than or equal to 1 and less than or equal to the length of address_book)
    * If valid, access the entry at the specified index (number - 1)
    * Print the details (name, phone, and email) of the entry
    * If invalid, print an error message
    """
    pass  # Remove this and add your code

def clear_entries() -> None:
    """
    Clear all entries in the address book.

    * Use the list's clear() method to empty the address_book list
    * Print a success message
    """
    pass  # Remove this and add your code

def show_menu() -> None:
    """
    Display the main menu options to the user, and get their choice.

    * Print the options for adding, removing, listing, showing, clearing entries, and exiting
    * Use the constants defined at the beginning of the script for the menu options
    * Prompt the user for their choice, and return it
    """
    pass  # Remove this and add your code

def main() -> None:
    """
    Main function to run the address book program.

    * Use an infinite while loop to continuously display the menu and prompt the user for a choice
    * Based on the choice, call the appropriate function or exit the loop
    * If the user chooses to add an entry, prompt for the name, phone, and email, then call add_entry()
    * If the user chooses to remove an entry, check if the address book is empty, prompt for the entry number, then call remove_entry()
    * If the user chooses to list entries, check if the address book is empty, then call list_entries()
    * If the user chooses to show an entry, check if the address book is empty, prompt for the entry number, then call show_entry()
    * If the user chooses to clear entries, call clear_entries()
    * If the user chooses to exit, use the sys.exit() function to terminate the script
    * If the user enters an invalid choice, print an error message
    """
    pass  # Remove this and add your code

# Run the main function if the script is executed directly
if __name__ == '__main__':
    sys.exit(main())
